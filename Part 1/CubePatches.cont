#version 400

layout(vertices = 16) out;

uniform mat4 mvMatrixl;
uniform float time;
//use for projectile 46min 
uniform int explosionCompleted;
vec4 delta = vec4(0,0,0,0);
vec4 explosionDirection = vec4(0,0,0,0);
double vy = 0;
double vh = 0;

int distanceMin;
int distanceMax ;
int Lhigh;
int Llow ;

vec4 fragCentre;

float tesselationLevel;

void main()
{   
    vec3 viewPosition;    
    viewPosition.x = mvMatrixl[3][0];
    viewPosition.y = mvMatrixl[3][1];
    viewPosition.z = mvMatrixl[3][2];
    
    float distance = pow(pow(viewPosition.x,2) +  pow(viewPosition.y,2) +  pow(viewPosition.z,2),0.5);
    
    distanceMin = -30;
    distanceMax = 200;
    
    Lhigh = 50;
    Llow = 2;
    
    tesselationLevel = ((distance - distanceMin)/(distanceMax - distanceMin) * (Llow - Lhigh) + Lhigh);




    gl_TessLevelOuter[0] = tesselationLevel;
    gl_TessLevelOuter[1] = tesselationLevel;
    gl_TessLevelOuter[2] = tesselationLevel;
    gl_TessLevelOuter[3] = tesselationLevel;
    gl_TessLevelInner[0] = tesselationLevel;
    gl_TessLevelInner[1] = tesselationLevel;
    

    fragCentre = (gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position + gl_in[3].gl_Position + gl_in[4].gl_Position +  gl_in[5].gl_Position + gl_in[6].gl_Position + gl_in[7].gl_Position + gl_in[8].gl_Position +     gl_in[9].gl_Position + gl_in[10].gl_Position + gl_in[11].gl_Position + gl_in[12].gl_Position + gl_in[13].gl_Position + gl_in[14].gl_Position + gl_in[15].gl_Position) / 16;
    
    explosionDirection = normalize(fragCentre);
 
    
    delta = vec4(explosionDirection.x * time  * 100, (100 *  explosionDirection.y * time) -  (time * time), 100 * explosionDirection.z * time ,0) * 0.01 ;
        



    if(gl_in[0].gl_Position.y + delta.y >= 0 && gl_in[1].gl_Position.y + delta.y >= 0 && gl_in[2].gl_Position.y + delta.y >= 0 && gl_in[3].gl_Position.y + delta.y >= 0 && gl_in[4].gl_Position.y + delta.y >= 0 && gl_in[5].gl_Position.y  + delta.y >= 0 && gl_in[6].gl_Position.y + delta.y >= 0 && gl_in[7].gl_Position.y + delta.y >= 0 && gl_in[8].gl_Position.y + delta.y >= 0 && gl_in[9].gl_Position.y + delta.y >= 0 && gl_in[10].gl_Position.y + delta.y >= 0 && gl_in[11].gl_Position.y + delta.y >= 0 && gl_in[12].gl_Position.y + delta.y >= 0 && gl_in[13].gl_Position.y + delta.y >= 0  && gl_in[14].gl_Position.y + delta.y >= 0 && gl_in[15].gl_Position.y + delta.y >= 0)
    {
      gl_out[gl_InvocationID].gl_Position =  gl_in[gl_InvocationID].gl_Position + delta;
    }


}
